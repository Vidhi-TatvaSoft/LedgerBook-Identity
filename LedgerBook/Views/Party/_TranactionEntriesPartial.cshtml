@using DataAccessLayer.ViewModels;
@using BusinessAcessLayer.Helper;
@model LedgerEntriesViewModel;


@if (Model.TransactionsList.Count == 0)
{
    <div class="d-flex flex-column justify-content-center align-items-center h-100">
        <div><img src="~/images/users.png" alt="" height="150px"></div>
        <div class="fs-4 text-secondary">No entries Added</div>
    </div>
}
else
{
    <div
        class="net-balance d-flex @((Model.NetBalance != 0) || (Model.NetBalance > 0 && Model.IspartyVerified) ? "justify-content-between" : "justify-content-end")  mt-3 mb-4">

        @if (Model.NetBalance != 0)
        {
            <div class="fs-5 d-flex flex-column flex-xl-row align-items-center" style="width: fit-content;">
                @if (Model.NetBalance > 0 && Model.IspartyVerified)
                {
                    <div class="btn btn-outline-danger text-nowrap p-1" style="max-height: fit-content; width: 100%;"
                        onclick="SendReminder(@Model.NetBalance, @Model.TransactionsList.First().PartyId)"
                        data-amount="@Model.NetBalance" data-transactionId="@Model.TransactionsList.First().PartyId">Send reminder
                    </div>
                }
                @if (Model.NetBalance != 0)
                {
                    <div class="btn btn-outline-danger text-nowrap p-1 mt-2 mt-xl-0 @(Model.IspartyVerified ?  "ms-xl-2" : "ms-0")" data-bs-toggle="modal" data-bs-target="#settleup-modal" onclick="SettleUpModal(@Model.NetBalance,@Model.TransactionsList.First().PartyId)">Mark as settled</div>
                }
            </div>
        }

        <div class="fs-5">
            <div class="text-semibold text-secondary ">NET BALANCE:</div>
            @if (Model.NetBalance == 0)
            {
                <div class="text-end">Settled up: <span class="text-dark">₹@Model.NetBalance</span></div>
            }
            else if (Model.NetBalance < 0)
            {
                <div class="text-end">You"ll Give: <span class="text-success">₹@Math.Abs(Model.NetBalance)</span></div>
            }
            else
            {
                <div class="text-end">You"ll Get: <span class="text-danger">₹@Math.Abs(Model.NetBalance)</span></div>
            }
        </div>
    </div>
   

    <div class="row border-bottom p-2">
        <div class="col-4 text-secondary fw-bold">ENTRIES</div>
        <div class="col-3 text-center text-secondary fw-bold">YOU GAVE</div>
        <div class="col-3 text-center text-secondary fw-bold">YOU GOT</div>
        <div class="col-2 text-center text-secondary fw-bold">DELETE</div>
    </div>

    <div class="p-0 transaction-entry-scroll">
        @foreach (var entry in Model.TransactionsList)
        {
            <div class="row border-bottom p-2 mt-2 cursor-pointer" data-bs-toggle="modal" title="Update transaction"
                data-bs-target="#transaction-entry-modal" onclick="displayUpdateTransactionModal(@entry.TransactionId)">
                <div class="col-4  d-flex flex-column">
                    <div class="fw-bold entry-date"></div>
                    <div class="fw-bold entry-date-hidden d-none">@entry.CreatedAt</div>
                    <div class="text-secondary">BALANCE : @entry.Balance</div>
                </div>
                @if (entry.TransactionType == (byte)DataAccessLayer.Constant.EnumHelper.TransactionType.GAVE)
                {
                    <div class="col-3 text-center text-danger fw-bold fs-5">₹@entry.TransactionAmount</div>
                    <div class="col-3 text-center text-success fw-bold fs-5">-</div>
                }
                else
                {
                    <div class="col-3 text-center text-danger fw-bold fs-5">-</div>
                    <div class="col-3 text-center text-success fw-bold fs-5">₹@entry.TransactionAmount</div>
                }
                <div class="col-2 text-center text-secondry fw-bold fs-5"><i class="fa-solid fa-trash-can text-black"
                        title="Delete transaction" data-bs-toggle="modal" data-bs-target="#delete-entry-modal"
                        onclick="deleteTransactionId(@entry.TransactionId)"></i></div>

            </div>
        }
    </div>
}


<!----------------------------------- modal ---------------------------->
<div id="delete-entry-modal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="add-user-modal-title">Delete transaction confirmation</h5>
                <button type="button" class="btn-close user-delete-modal-close-btn" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <p>Are you sure you want to delete this transaction?</p>
                    <input type="hidden" id="transactionId">
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <a type="submit" class="btn btn-primary" onclick="deleteTransaction()">Yes</a>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>



<partial name="_ValidationScriptsPartial" />
<partial name="_Toaster" />

<script>
    function formateDate() {
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        let entrydateshidden = document.getElementsByClassName("entry-date-hidden");
        let entrydates = document.getElementsByClassName("entry-date");

        for (i = 0; i < entrydateshidden.length; i++) {
            var entrydate = entrydateshidden[i].innerHTML.trim();
            var Dateonly = entrydate.split(" ");
            var entryDay = Dateonly[0].split("-")[0];
            var entryMonth = Dateonly[0].split("-")[1];
            var entryYear = Dateonly[0].split("-")[2];
            var entryDateformated = entryYear + "-" + entryMonth + "-" + entryDay + "T" + Dateonly[1];
            const date = new Date(entryDateformated);
            const day = date.getDate();
            const month = monthNames[date.getMonth()];
            const year = date.getFullYear();

            let hours = date.getHours();
            const minutes = date.getMinutes();
            const ampm = hours >= 12 ? 'PM' : 'AM';

            hours = hours % 12;
            hours = hours ? hours : 12;
            const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;

            const formattedDate = `${day} ${month} ${year} ${hours}:${formattedMinutes} ${ampm}`;
            entrydates[i].innerHTML = formattedDate;
        }
    }

    $(document).ready(function () {
        formateDate();
    })

</script>